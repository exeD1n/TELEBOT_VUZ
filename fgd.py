from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import pymysql
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, reply_keyboard
from auth import TOKEN


"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–ª–∫—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
mySQLServer = 'localhost'
myDataBase = 'PgutyBot'
user = 'root'
passwodr = ''


"""–ò–Ω–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –±–æ—Ç–∞"""
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

"""–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
try:
    connection = pymysql.connect(host = mySQLServer,port = 3306,database = myDataBase,user = user,password = passwodr,cursorclass = pymysql.cursors.DictCursor)
    print('<<<<<< –ë–ê–ó–ê –î–ê–ù–ù–´–• –£–°–ü–ï–®–ù–û –†–ê–ë–û–¢–ê–ï–¢ >>>>>>') 
        
    """–ë–û–¢ –¢–ï–õ–ï–ì–†–ê–ú"""
    class InputData(StatesGroup):
        input_group = State()
        input_subject = State()
        input_lab = State()

    @dp.message_handler(commands=['start'])
    async def send_welcome(message: types.Message):
        kb = [
            [types.KeyboardButton(text="–£—á–∏—Ç–µ–ª—å")],
            [types.KeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç")]
        ]
        keyboardStart = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True
        )
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name} üëã\n–ö–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å?', reply_markup=keyboardStart)

    @dp.message_handler()
    async def students(message: types.Message):
        if message.text == "–°—Ç—É–¥–µ–Ω—Ç":
            markup = InlineKeyboardMarkup().add(InlineKeyboardButton("–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å", callback_data="group_input")).add(InlineKeyboardButton("–ü—Ä–∞–∫—Ç–∏–∫–∞", callback_data="lab_input"))
            await message.answer("–í—ã–±–µ—Ä–µ—Ç —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ", reply_markup=markup)
        # if message.text == "–£—á–∏—Ç–µ–ª—å":
        #     markup = InlineKeyboardMarkup().add(InlineKeyboardButton("–ò–∑–º–µ–Ω. —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å", callback_data="group_input")).add(InlineKeyboardButton("–ü—Ä–∞–∫—Ç–∏–∫–∞", callback_data="lab_input"))
        #     await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É\n—á—Ç–æ –±—ã –≤–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É", reply_markup=markup)

    @dp.callback_query_handler(text="group_input")
    async def group_call(call: types.CallbackQuery):
        await call.answer()
        await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏ –ø—Ä–µ–¥–º–µ—Ç \n\n–ü—Ä–∏–º–µ—Ä: –ò–≤—Ç26—É –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", reply_markup=types.ReplyKeyboardRemove())
        await InputData.input_group.set()
        
    @dp.callback_query_handler(text="lab_input")
    async def group_call(call: types.CallbackQuery):
        await call.answer()
        await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—Ä–µ–¥–º–µ—Ç\n–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n–ü—Ä–∏–º–µ—Ä: –†—É—Å—Å–∫–∏–π –ø—Ä–∞–∫—Ç–∏–∫–∞", reply_markup=types.ReplyKeyboardRemove())
        await InputData.input_lab.set()
        
    @dp.message_handler(state=InputData.input_group)
    async def group_input(message: types.Message):
        group_subject_info = message.text.lower().split(" ")
        
        with connection.cursor() as cursor:
            select_name_grup = "SELECT * FROM Subject;"
            cursor.execute(select_name_grup)
            rows = cursor.fetchall()            
            name_subject = {}
            for row in rows:
                key, value = row['idSubject'], row['Subject']
                name_subject[key] = value  
        
        for k, j in name_subject.items():
            if j == group_subject_info[1]:
                idsubject = k
        
        with connection.cursor() as cursor:
            select_name_grup = "SELECT * FROM Rating;"
            cursor.execute(select_name_grup)
            rows = cursor.fetchall()            
            name_subject = {}
            for row in rows:
                if row['idSubject']==idsubject and row['name_group']==str(group_subject_info[0]):
                    link_rating = row['link_rating']
                
        await message.answer(f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ - {group_subject_info[0]}\n–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç - {group_subject_info[1]}\n\n–í–∞—à–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {link_rating}")
        
    @dp.message_handler(state=InputData.input_lab)
    async def lab_input(message: types.Message):
        subject_lab_info = message.text.lower().split(" ")
        
        with connection.cursor() as cursor:
            select_name_grup = "SELECT * FROM Subject;"
            cursor.execute(select_name_grup)
            rows = cursor.fetchall()            
            name_subject = {}
            for row in rows:
                key, value = row['idSubject'], row['Subject']
                name_subject[key] = value  
        
        for k, j in name_subject.items():
            if j == subject_lab_info[0]:
                idsubject = k
        
        with connection.cursor() as cursor:
            select_name_grup = "SELECT * FROM LabPractick;"
            cursor.execute(select_name_grup)
            rows = cursor.fetchall()            
            dict_lab = {}
            for row in rows:
                if row['idSubject']==idsubject and row['LabOrPrack']==str(subject_lab_info[1]):
                    key, value = row['namePractick'], row['linkPractick']
                    dict_lab[key] = value
                    
        for k, j in dict_lab.items():
            name_prack = k
            linkPractick = j
            await message.answer(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç - {subject_lab_info[0]}\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã: {str(name_prack).title()}\n\n{subject_lab_info[1].title()} –ø–æ —Å—Å—ã–ª–∫–µ: {linkPractick}")
    
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""   
    if __name__ == '__main__':
        executor.start_polling(dp, skip_updates=True)
    
#–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
except Exception as ex:
    print('Connection refused')
    print('ex')     
    

