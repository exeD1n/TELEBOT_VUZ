from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import pymysql
from auth import TOKEN


"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–ª–∫—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
mySQLServer = 'localhost'
myDataBase = 'PgutyBot'
user = 'root'
passwodr = ''


"""–ò–Ω–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –±–æ—Ç–∞"""
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

"""–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
try:
    connection = pymysql.connect(host = mySQLServer,port = 3306,database = myDataBase,user = user,password = passwodr,cursorclass = pymysql.cursors.DictCursor)
    print('<<<<<< –ë–ê–ó–ê –î–ê–ù–ù–´–• –£–°–ü–ï–®–ù–û –†–ê–ë–û–¢–ê–ï–¢ >>>>>>')

    
    with connection.cursor() as cursor:
        select_name_grup = "SELECT * FROM Subject;"
        cursor.execute(select_name_grup)
        rows = cursor.fetchall()            
        name_subject = {}
        for row in rows:
            key, value = row['idSubject'], row['Subject']
            name_subject[key] = value   

    """–ë–û–¢ –¢–ï–õ–ï–ì–†–ê–ú"""
    class InputData(StatesGroup):
        input_group = State()
        input_subject = State()

    @dp.message_handler(commands=['start'])
    async def send_welcome(message: types.Message):
        kb = [
            [types.KeyboardButton(text="–£—á–∏—Ç–µ–ª—å")],
            [types.KeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç")]
        ]
        keyboardStart = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True
        )
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name} üëã\n–ö–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å?', reply_markup=keyboardStart)

    @dp.message_handler(text="–°—Ç—É–¥–µ–Ω—Ç")
    async def students(message: types.Message):
        markup = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", callback_data="group_input"))
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É\n—á—Ç–æ –±—ã –≤–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É", reply_markup=markup)

    @dp.callback_query_handler(text="group_input")
    async def group_call(call: types.CallbackQuery):
        await call.answer()
        await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≥—Ä—É–ø–ø—É —Ç–µ–∫—Å—Ç–æ–º", reply_markup=types.ReplyKeyboardRemove())
        await InputData.input_group.set()
        
    @dp.message_handler(state=InputData.input_group)
    async def group_input(message: types.Message):
        markup = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞", callback_data="subject_input"))
        await message.answer(f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ - {message.text.lower()}", reply_markup=markup)
    
    @dp.callback_query_handler(text="subject_input")
    async def subject_call(call: types.CallbackQuery):
        await call.answer()
        
        await call.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—Ä–µ–¥–º–µ—Ç", reply_markup=types.ReplyKeyboardRemove())
        await InputData.input_group.set()
    
    
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""   
    if __name__ == '__main__':
        executor.start_polling(dp, skip_updates=True)
    
#–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
except Exception as ex:
    print('Connection refused')
    print('ex')     
    

