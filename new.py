from cgitb import text
from auth import TOKEN
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, reply_keyboard
import pymysql

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataBase
mySQLServer = 'localhost'
myDataBase = 'PgutyBot'
user = 'root'
passwodr = ''


# –ò–Ω–∏—Ü–∏–∞–ª—å–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = TOKEN
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

'''–ö–æ–Ω–µ–∫—Ç –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'''
try:
    connection = pymysql.connect(host = mySQLServer,port = 3306,database = myDataBase,user = user,password = passwodr,cursorclass = pymysql.cursors.DictCursor)
    print('succesfully conneted')
    
    # –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ –∏ –µ–≥–æ –≤—ã–±–æ—Ä –∫–Ω–æ–ø–æ–∫
    @dp.message_handler(commands=['start'])
    async def send_welcome(message: types.Message):
        kb = [
            [types.KeyboardButton(text="–£—á–∏—Ç–µ–ª—å")],
            [types.KeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç")]
        ]
        keyboardStart = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True
        )
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name} üëã\n–ö–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å?', reply_markup=keyboardStart)
    
    '''–°—Ç—É–¥–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω –∏ –≤—Å–µ –æ—Ç –Ω–µ–≥–æ'''
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç
    @dp.message_handler(text = "–°—Ç—É–¥–µ–Ω—Ç")
    async def echo(message: types.Message):
        kb = [
            [
                types.KeyboardButton(text="–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å"),
                types.KeyboardButton(text="–õ–æ–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ")
            ],
            [
                types.KeyboardButton(text = '–ú–µ–Ω—é'),
            ]
        ]
        keyboardStudChek = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True
        )
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å', reply_markup=keyboardStudChek)
    
    # –í—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–æ–º —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
    @dp.message_handler(text='–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å')
    async def echo(message: types.Message):
        try:
            with connection.cursor() as cursor:
                select_name_grup = "SELECT * FROM Rating;"
                cursor.execute(select_name_grup)
                rows = cursor.fetchall()
                all_name_group = [] # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
                for row in rows:
                    all_name_group.append(row['name_group'])
                name_group = [] # –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                for i in all_name_group:
                    if i not in name_group:
                        name_group.append(i)
        finally:
            connection.close() 
        builder = ReplyKeyboardMarkup()
        for i in name_group:
            builder.add(types.KeyboardButton(text=str(i)))
        builder.add(types.KeyboardButton(text='–ú–µ–Ω—é'))
        await message.answer('–í –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –≤—ã —É—á–∏—Ç–µ—Å—å?', reply_markup=builder)
    
except Exception as ex:
    print('Connection refused')
    print('ex')     
    

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)