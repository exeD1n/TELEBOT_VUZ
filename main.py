from cgitb import text
from auth import TOKEN
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, reply_keyboard
from database import name_group, name_subject


API_TOKEN = TOKEN
# —è –∏–∑–º–µ–Ω–∏–ª
# –ò–Ω–∏—Ü–∏–∞–ª—å–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)



# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–£—á–∏—Ç–µ–ª—å")],
        [types.KeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç")]
    ]
    keyboardStart = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name} üëã\n–ö–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å?', reply_markup=keyboardStart)

# # –ö–Ω–æ–ø–∫–∞ '–£—á–∏—Ç–µ–ª—å' 
# @dp.message_handler(text = "–£—á–∏—Ç–µ–ª—å")
# async def command_teacher(message: types.Message):   
    
#     kb_teacher = [
#             [
#             types.KeyboardButton(text = '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ'),
#             types.KeyboardButton(text='–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ')
#             ],
#             [
#             types.KeyboardButton(text = '–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ'),
#             types.KeyboardButton(text='–û—Ü–µ–Ω–∫–∏')
#             ],
#             [
#             types.KeyboardButton(text='–ú–µ–Ω—é')
#             ]
#     ]   
        
#     keyboardTeacher = types.ReplyKeyboardMarkup(
#         keyboard=kb_teacher,
#         resize_keyboard=True
#     )
#     await message.answer('–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=keyboardTeacher) 

# #–ö–Ω–æ–ø–∫–∞ '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ'
# @dp.message_handler(text= "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ")
# async def command_praktic(message:types.Message):
#     kb_prak = [
#         [
#             types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é")  #–ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ
#         ],
#         [
#             types.KeyboardButton(text='–ú–µ–Ω—é')
#         ]
#     ]
#     keyboardPraktic = types.ReplyKeyboardMarkup(
#         keyboard=kb_prak,
#         resize_keyboard=True
#     )
#     await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboardPraktic)

# #–ö–Ω–æ–ø–∫–∞ '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ'
# @dp.message_handler(text= "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ")
# async def command_lekc(message:types.Message):
#     kb_lekc = [
#         [
#             types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é")  #–ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ
#         ],
#         [
#              types.KeyboardButton(text='–ú–µ–Ω—é')
#         ]
#     ]
#     keyboardLekc = types.ReplyKeyboardMarkup(
#         keyboard=kb_lekc,
#         resize_keyboard=True
#     )
#     await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboardLekc)  

# #–ö–Ω–æ–ø–∫–∞ '–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ'
# @dp.message_handler(text= "–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ")
# async def command_lek(message:types.Message):
#     kb_lek = [
#         [
#             types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫—Ü–∏—é")  #–ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ
#         ],
#         [
#              types.KeyboardButton(text='–ú–µ–Ω—é')
#         ]
#     ]
#     keyboardLek = types.ReplyKeyboardMarkup(
#         keyboard=kb_lek,
#         resize_keyboard=True
#     )
#     await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboardLek)

# #–ö–Ω–æ–ø–∫–∞ '–û—Ü–µ–Ω–∫–∏'
# @dp.message_handler(text= "–û—Ü–µ–Ω–∫–∏")
# async def command_ocenki(message:types.Message):
#     kb_ocenki = [
#         [
#             types.KeyboardButton(text="–í—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É")  #–ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ
#         ],
#         [
#              types.KeyboardButton(text='–ú–µ–Ω—é')
#         ]
#     ]
#     keyboardOcenki = types.ReplyKeyboardMarkup(
#         keyboard=kb_ocenki,
#         resize_keyboard=True
#     )
#     await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboardOcenki)    

# –ö–Ω–æ–ø–∫–∞ '–°—Ç—É–¥–µ–Ω—Ç' 
@dp.message_handler(text = "–°—Ç—É–¥–µ–Ω—Ç")
async def command_student(message:types.Message):   
    builder = ReplyKeyboardMarkup()
    for i in name_group:
        builder.add(types.KeyboardButton(text=str(i)))
    builder.add(types.KeyboardButton(text='–ú–µ–Ω—é'))
        
    # kb_student = [
    #         [
    #         types.KeyboardButton(text = '–ú–æ–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ'),
    #         types.KeyboardButton(text='–ú–æ–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ')
    #         ],
    #         [
    #         types.KeyboardButton(text = '–°–ø–∏—Å–æ–∫ –ª–µ–∫—Ü–∏–π'),
    #         types.KeyboardButton(text='–ú–æ–∏ –æ—Ü–µ–Ω–∫–∏')
    #         ],
    #         [
    #         types.KeyboardButton(text='–ú–µ–Ω—é')
    #         ]
    # ]   
    # keyboardStudent = types.ReplyKeyboardMarkup(
    #     keyboard=kb_student,
    #     resize_keyboard=True
    # )
    await message.answer('–í –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –≤—ã —É—á–∏—Ç–µ—Å—å?', reply_markup=builder)

@dp.message_handler()
async def echo(message: types.Message):
    builder = ReplyKeyboardMarkup()
    for i in name_group:
        if message.text == i:
            for k, v in name_subject:
                builder.add(types.KeyboardButton(text=str(v)))
            builder.add(types.KeyboardButton(text='–ú–µ–Ω—é'))
            await message.reply('–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç', reply_markup=builder)

    # elif message.text == '–°—Ç—É–¥–µ–Ω—Ç':
    #     await message.reply("", reply_markup=types.ReplyKeyboardRemove())
    
#–ö–Ω–æ–ø–∫–∞ –ú–æ–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ    
# @dp.message_handler(text = stay)
# async def command_praks(message: types.Message):
#         kb_praktics = [
#             [
#                 types.KeyboardButton(text='–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç')
#             ],
#             [
#             types.KeyboardButton(text='–ú–µ–Ω—é')    
#             ]
#         ]
#         keyboardPaktics = types.ReplyKeyboardMarkup(
#             keyboard=kb_praktics,
#             resize_keyboard=True
#         )
#         await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å', reply_markup=keyboardPaktics)
# #–ö–Ω–æ–ø–∫–∞ –ú–æ–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ    
# @dp.message_handler(text = '–ú–æ–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ')
# async def command_labs(message: types.Message):
#         kb_labs = [
#             [
#             types.KeyboardButton(text='–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç')
#             ],
#             [
#             types.KeyboardButton(text='–ú–µ–Ω—é')    
#             ]
#         ]
#         keyboardLabs = types.ReplyKeyboardMarkup(
#             keyboard=kb_labs,
#             resize_keyboard=True
#         )
#         await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å', reply_markup=keyboardLabs) 
# #–ö–Ω–æ–ø–∫–∞ –°–ø–∏—Å–æ–∫ –ª–µ–∫—Ü–∏–π    
# @dp.message_handler(text = '–°–ø–∏—Å–æ–∫ –ª–µ–∫—Ü–∏–π')
# async def command_lekcs(message: types.Message):
        
#         kb_lekcs = [
#             [
#                 types.KeyboardButton(text='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'),
#                 types.KeyboardButton(text='–†—É—Å—Å–∫–∏–π —è–∑—ã–∫'), 
#                 types.KeyboardButton(text='–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ')
#             ],
#             [
#                 types.KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'),
#                 types.KeyboardButton(text='1–°'),
#                 types.KeyboardButton(text='–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
#             ],
#             [
#             types.KeyboardButton(text='–ú–µ–Ω—é')    
#             ]
#         ]
#         keyboardLekcs = types.ReplyKeyboardMarkup(
#             keyboard=kb_lekcs,
#             resize_keyboard=True
#         )
#         await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç', reply_markup=keyboardLekcs)
# #–ö–Ω–æ–ø–∫–∞ –ú–æ–∏ –æ—Ü–µ–Ω–∫–∏    
# @dp.message_handler(text = '–ú–æ–∏ –æ—Ü–µ–Ω–∫–∏')
# async def command_ocenki(message: types.Message):
        
#         kb_ocenki = [
#             [
#                 types.KeyboardButton(text='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'),
#                 types.KeyboardButton(text='–†—É—Å—Å–∫–∏–π —è–∑—ã–∫'), 
#                 types.KeyboardButton(text='–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ')
#             ],
#             [
#                 types.KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'),
#                 types.KeyboardButton(text='1–°'),
#                 types.KeyboardButton(text='–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
#             ],
#             [
#             types.KeyboardButton(text='–ú–µ–Ω—é')    
#             ]
#         ]
#         keyboardOcenki = types.ReplyKeyboardMarkup(
#             keyboard=kb_ocenki,
#             resize_keyboard=True
#         )
#         await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç', reply_markup=keyboardOcenki)                       
# # –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
@dp.message_handler(text = '–ú–µ–Ω—é')
async def menu(message:types.Message):
    kb = [
        [types.KeyboardButton(text="–£—á–∏—Ç–µ–ª—å")],
        [types.KeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç")]
    ]
    keyboardStart = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboardStart)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)